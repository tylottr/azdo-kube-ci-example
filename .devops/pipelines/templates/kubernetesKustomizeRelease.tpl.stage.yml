#############################################################
# Kubernetes Kustomize Deploy Stage
#
# This template contains a stage to perform a Kubernetes
# Deploy operation to a defined environment.
#############################################################
parameters:
- name: 'kubectlVersion'
  type: 'string'
  default: '1.21.1'
- name: 'appName'
  type: 'string'
  default: ''
- name: appDomain
  type: 'string'
  default: ''
- name: 'appContainerImage'
  type: 'string'
  default: ''
- name: 'appKustomizePath'
  type: 'string'
  default: ''
- name: 'kubernetesEnvironment'
  type: 'string'
  default: ''
- name: 'kubernetesResource'
  type: 'string'
  default: ''

stages:
- stage: 'deploy'
  displayName: 'Deploy to Kubernetes cluster'
  condition: succeeded()

  jobs:
  - deployment: 'deploy'
    displayName: 'Deploy'
    environment: '${{ parameters.kubernetesEnvironment }}.${{ parameters.kubernetesResource }}'

    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: 'self'
          - task: Bash@3
            name: 'validateStage'
            displayName: 'Validate Stage'
            inputs:
              targetType: 'inline'
              script: |
                if [ -z "$appName" ]; then
                  echo "##vso[task.logissue type=error]Missing or empty template parameter \"appName\""
                  echo "##vso[task.complete result=Failed]"
                fi

                if [ -z "$appDomain" ]; then
                  echo "##vso[task.logissue type=error]Missing or empty template parameter \"appDomain\""
                  echo "##vso[task.complete result=Failed]"
                fi

                if [ -z "$appContainerImage" ]; then
                  echo "##vso[task.logissue type=error]Missing or empty template parameter \"appContainerImage\""
                  echo "##vso[task.complete result=Failed]"
                fi

                if [ -z "$appKustomizePath" ]; then
                  echo "##vso[task.logissue type=error]Missing or empty template parameter \"appKustomizePath\""
                  echo "##vso[task.complete result=Failed]"
                fi

                if [ -z "$kubernetesEnvironment" ]; then
                  echo "##vso[task.logissue type=error]Missing or empty template parameter \"kubernetesEnvironment\""
                  echo "##vso[task.complete result=Failed]"
                fi

                if [ -z "$kubernetesResource" ]; then
                  echo "##vso[task.logissue type=error]Missing or empty template parameter \"kubernetesResource\""
                  echo "##vso[task.complete result=Failed]"
                fi
            env:
              appName: '${{ parameters.appName }}'
              appDomain: '${{ parameters.appDomain }}'
              appContainerImage: '${{ parameters.appContainerImage }}'
              appKustomizePath: '${{ parameters.appKustomizePath }}'
              kubernetesEnvironment: '${{ parameters.kubernetesEnvironment }}'
              kubernetesResource: '${{ parameters.kubernetesResource }}'

          - task: KubectlInstaller@0
            name: 'install'
            displayName: 'Install Kubectl'
            inputs:
              kubectlVersion: '${{ parameters.kubectlVersion }}'
              
          - task: Bash@3
            name: 'kustomize'
            displayName: 'Set up Kustomize file using sed'
            inputs:
              targetType: 'inline'
              script: |
                echo "Updating kustomization.yaml"
                sed -i \
                  -e "s;#appName#;$appName;g" \
                  -e "s;#appContainerImage#;$appContainerImage;g" \
                  -e "s;#appContainerTag#;$appContainerTag;g" \
                  kustomization.yaml

                echo "Updating ingress.yaml"
                sed -i \
                  -e "s;#appDomain#;$appDomain;g" \
                  ingress.yaml
              workingDirectory: '${{ parameters.appKustomizePath }}'
            env:
              appName: '${{ parameters.appName }}'
              appContainerImage: '${{ parameters.appContainerImage }}'
              appContainerTag: '$(Build.SourceBranchName)-$(Build.BuildId)'
              appDomain: '${{ parameters.appName }}.${{ parameters.appDomain }}'
          - task: KubernetesManifest@0
            name: 'bake'
            displayName: 'Bake Kubernetes Manifests'
            inputs:
              action: 'bake'
              renderType: 'kustomize'
              kustomizationPath: '${{ parameters.appKustomizePath }}'
          - task: KubernetesManifest@0
            name: 'deploy'
            displayName: 'Deploy Kubernetes Manifests'
            inputs:
              action: 'deploy'
              namespace: '${{ parameters.kubernetesResource }}'
              manifests: '$(bake.manifestsBundle)'
