#############################################################
# Terraform Apply Stage
#
# This template contains a stage to perform a Terraform
# Apply operation.
#############################################################
parameters:
- name: 'terraformVersion'
  type: 'string'
  default: '1.0.0'
- name: 'terraformWorkingDirectory'
  type: 'string'
  default: '$(Build.Repository.LocalPath)'
- name: 'terraformStateAzureSubscriptionName'
  type: 'string'
  default: ''
- name: 'terraformStateStorageAccountName'
  type: 'string'
  default: ''
- name: 'terraformWorkspace'
  type: 'string'
  default: ''
- name: 'sasTokenDuration'
  type: 'string'
  default: '2 hours'
- name: 'azureSubscription'
  type: 'string'
  default: ''
- name: 'terraformAdditionalArgs'
  type: 'string'
  default: ''
- name: 'terraformInputVariables'
  type: 'object'
  default: {}
- name: 'terraformDevopsEnvironment'
  type: 'string'
  default: 'terraform_apply'
- name: 'terraformApply'
  type: 'string'
  default: 'false'
- name: 'terraformDestroy'
  type: 'string'
  default: 'false'


stages:
- stage: 'terraformPlan'
  displayName: 'Terraform Plan'
  condition: succeeded()
  variables:
    TF_IN_AUTOMATION: true

  jobs:
  - job: 'terraformPlan'
    displayName: 'Terraform Plan'

    steps:
    - task: Bash@3
      name: 'validateStage'
      displayName: 'Validate Stage'
      inputs:
        targetType: 'inline'
        script: |
          if [ -z "$azureSubscription" ]; then
            echo "##vso[task.logissue type=error]Missing or empty template parameter \"azureSubscription\""
            echo "##vso[task.complete result=Failed]"
          fi

          if [ -z "$terraformStateStorageAccountName" ]; then
            echo "##vso[task.logissue type=error]Missing or empty template parameter \"terraformStateStorageAccountName\""
            echo "##vso[task.complete result=Failed]"
          fi
      env:
        azureSubscription: '${{ parameters.azureSubscription }}'
        terraformStateStorageAccountName: '${{ parameters.terraformStateStorageAccountName }}'

    - template: '/.devops/pipelines/templates/terraformInitAzure.tpl.steps.yml'
      parameters:
        terraformVersion: '${{ parameters.terraformVersion }}'
        terraformWorkingDirectory: '${{ parameters.terraformWorkingDirectory }}'
        terraformStateAzureSubscriptionName: '${{ parameters.terraformStateAzureSubscriptionName }}'
        terraformStateStorageAccountName: '${{ parameters.terraformStateStorageAccountName }}'
        terraformWorkspace: '${{ parameters.terraformWorkspace }}'
        sasTokenDuration: '${{ parameters.sasTokenDuration }}'
        azureSubscription: '${{ parameters.azureSubscription }}'

    - task: Bash@3
      name: 'plan'
      displayName: 'Terraform Plan'
      inputs:
        targetType: 'inline'
        script: |
          tfArgs="-input=false -out tf.plan"

          if [ ! -z "$terraformAdditionalArgs" ]; then
            tfArgs="$tfArgs $terraformAdditionalArgs"
          fi

          if [ "$terraformDestroy" == "true" ]; then
            tfArgs="$tfArgs -destroy"
          fi

          echo "Running command: terraform plan $tfArgs"
          terraform plan $tfArgs
        workingDirectory: '${{ parameters.terraformWorkingDirectory }}'
      env:
        ARM_TENANT_ID: '$(ARM_TENANT_ID)'
        ARM_SUBSCRIPTION_ID: '$(ARM_SUBSCRIPTION_ID)'
        ARM_CLIENT_ID: '$(ARM_CLIENT_ID)'
        ARM_CLIENT_SECRET: '$(ARM_CLIENT_SECRET)'
        terraformAdditionalArgs: '${{ parameters.terraformAdditionalArgs }}'
        terraformDestroy: '${{ parameters.terraformDestroy }}'
        ${{ each item in parameters.terraformInputVariables }}:
          TF_VAR_${{ item.key }}: ${{ item.value }}

    - task: PublishPipelineArtifact@1
      name: 'upload'
      displayName: 'Upload plan'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        targetPath: '${{ parameters.terraformWorkingDirectory }}/tf.plan'
        artifactName: 'plan'

- stage: 'terraformPlanApply'
  displayName: 'Terraform Plan Apply'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['terraformApply'], 'true'))
  variables:
    TF_IN_AUTOMATION: true

  jobs:
  - deployment: 'terraformApply'
    displayName: 'Terraform Plan Apply'
    environment: '${{ parameters.terraformDevopsEnvironment }}'

    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: 'self'
          - template: '/.devops/pipelines/templates/terraformInitAzure.tpl.steps.yml'
            parameters:
              terraformVersion: '${{ parameters.terraformVersion }}'
              terraformWorkingDirectory: '${{ parameters.terraformWorkingDirectory }}'
              terraformStateAzureSubscriptionName: '${{ parameters.terraformStateAzureSubscriptionName }}'
              terraformStateStorageAccountName: '${{ parameters.terraformStateStorageAccountName }}'
              terraformWorkspace: '${{ parameters.terraformWorkspace }}'
              sasTokenDuration: '${{ parameters.sasTokenDuration }}'
              azureSubscription: '${{ parameters.azureSubscription }}'

          - task: DownloadPipelineArtifact@2
            name: 'download'
            displayName: 'Download plan'
            inputs:
              artifact: 'plan'

          - task: Bash@3
            name: 'apply'
            displayName: 'Terraform Apply'
            inputs:
              targetType: 'inline'
              script: 'terraform apply $terraformPlan'
              workingDirectory: '${{ parameters.terraformWorkingDirectory }}'
            env:
              ARM_TENANT_ID: '$(ARM_TENANT_ID)'
              ARM_SUBSCRIPTION_ID: '$(ARM_SUBSCRIPTION_ID)'
              ARM_CLIENT_ID: '$(ARM_CLIENT_ID)'
              ARM_CLIENT_SECRET: '$(ARM_CLIENT_SECRET)'
              terraformPlan: '$(Pipeline.Workspace)/tf.plan'
