#############################################################
# Kubernetes Application
# 
# This pipeline will build and deploy a containerised
# application to a Kubernetes cluster.
#############################################################
name: '$(appName)-$(Build.SourceBranchName)'

trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    include:
    - 'application/flask'

variables:
- group: 'shared-app'
## Contains:
## * appBasePath
## * appDomain
## * appKustomizePath
## * containerRegistry
## * kubernetesEnvironment
## * kubernetesResource
# Pipeline Variables
## Set these variables on pipeline creation or uncomment and update in here if it will be static
- name: 'appName'
  value: 'flask'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: 'testFlaskApplication'
  displayName: 'Test Flask Application'
  jobs:
  - job: 'lintTest'
    displayName: 'Run Lint Test'

    steps:
    - checkout: 'self'

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true
        architecture: 'x64'
    - task: Bash@3
      name: 'installDependencies'
      displayName: 'Install Dependencies'
      inputs:
        targetType: 'inline'
        script: 'python -m pip install --upgrade pip; pip install -r requirements.txt'
        workingDirectory: '$(appBasePath)/$(appName)'

    - task: Bash@3
      name: 'runLintTest'
      displayName: 'Run Lint Test'
      inputs:
        targetType: 'inline'
        script: 'pylint *.py -f pylint_junit.JUnitReporter | tee lint.xml'
        workingDirectory: '$(appBasePath)/$(appName)'
    - task: PublishTestResults@2
      name: 'publishLintingResults'
      displayName: 'Publish Linting Results'
      condition: succeededOrFailed()
      inputs:
        testRunTitle: '$(appName) Linting'
        failTaskOnFailedTests: true
        buildConfiguration: '$(appName):$(Build.SourceBranchName)-$(Build.BuildId)'
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(appBasePath)/$(appName)/lint.xml'

- template: '/.devops/pipelines/templates/dockerBuild.tpl.stage.yml'
  parameters:
    appName: '$(appName)'
    appBasePath: '$(appBasePath)/$(appName)'
    containerRegistry: '$(containerRegistry)'

- template: '/.devops/pipelines/templates/kubernetesKustomizeRelease.tpl.stage.yml'
  parameters:
    appName: '$(appName)'
    appDomain: '$(appDomain)'
    appContainerImage: '$(containerRegistry)/$(appName)'
    appKustomizePath: '$(appKustomizePath)'
    kubernetesEnvironment: '$(kubernetesEnvironment)'
    kubernetesResource: '$(kubernetesResource)'
